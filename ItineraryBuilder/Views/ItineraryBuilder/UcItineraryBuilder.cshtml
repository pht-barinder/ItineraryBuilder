@model List<ItineraryBuilder.Models.ItinerarySearch>
@{
    ItineraryBuilder.Repository.DbRepository _db = new ItineraryBuilder.Repository.DbRepository();
}
@using ItineraryBuilder.Util;
<div id="AFGView" style="display: none">
    @if (Model != null && Model.Count > 0)
    {
        foreach (var grp in Model.GroupBy(p => p.FlightID))
        {
        <span class="title-streep">Flight <b>@grp.Key </b></span>
        <table class="grid-a" cellpadding="0" cellspacing="0">
            <thead>
                <tr>
                    <th style="width: 55px;">
                        Carrier
                    </th>
                    <th style="width: 55px;">
                        Flight
                    </th>
                    <th style="width: 55px;">
                        From
                    </th>
                    <th style="width: 55px;">
                        Depart
                    </th>
                    <th style="width: 55px;">
                        To
                    </th>
                    <th style="width: 55px;">
                        Arrive
                    </th>
                    <th style="width: 55px;">
                        A/C
                    </th>
                    <th style="width: 55px;">
                        St
                    </th>
                    <th style="width: 55px;">
                        Date
                    </th>
                    <th style="width: 210px;">
                        Class
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var its in Model.Where(p => p.FlightID == grp.Key).OrderBy(p => p.From).ThenBy(p => p.FlightStat.DepartureTime))
                {
                    int i = _db.GetFlightDataByItineraryID(its.Id).Count();
                    <tr>
                        <td>
                            @(its.FlightStat.CarrierAirlineCode)<br />
                        </td>
                        <td style="text-align:right">
                            @(its.FlightStat.FlightNumber)
                        </td>
                        <td>
                            @(its.FlightStat.DepartureAirportCode)
                        </td>
                        <td style="text-align:right">
                            @(its.FlightStat.DepartureTime)
                        </td>
                        <td>
                            @(its.FlightStat.ArrivalAirportCode)
                        </td>
                        <td style="text-align:right">
                            @(its.FlightStat.ArrivalTime)
                        </td>
                        <td style="text-align:right">
                            @(its.FlightStat.AircraftTypeCode)
                        </td>
                        <td style="text-align:right">
                            0
                        </td>
                        <td style="text-align:right">
                            @(its.FromDate)
                        </td>
                        <td>
                            <span class="FL">
                                @(its.Class.UtilGetEnumAsString(true))</span>
                            @if (i > 1)
                            {
                                <span class="FR"><a href="javascript:void(0);" onclick="DeleteFlightLeg(this,@its.FlightStat.Id,'@its.OpportunityId','@its.FlightRequestID')">
                                    Delete</a> </span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        }
    }
</div>
<div id="CustomerViewDiv" style="display: none">
    @if (Model != null && Model.Count > 0)
    {
        int j = 1;

        foreach (var grp in Model.GroupBy(p => p.FlightID))
        {
            TimeSpan t = TimeSpan.FromMinutes(grp.Sum(p => p.FlightStat.FlightDurationMinutes));
            var hours = (int)t.TotalHours;
            var minutes = t.Minutes;
        <div class="Info Clear">
            <div class="Info-Header">
                <p class="Logo-Plane">
                    Flight
                    @grp.Key</p>
                <p class="ML35">
                    @grp.Min(p => p.From).Value.ToString("ddd, MMM dd")</p>
                <p class="ML20">
                    @grp.OrderBy(p => p.From).ThenBy(p => p.FlightStat.DepartureTime).FirstOrDefault().FlightStat.DepartureAirportCode<span>
                        to </span>@grp.OrderBy(p => p.From).ThenBy(p => p.FlightStat.DepartureTime).LastOrDefault().FlightStat.ArrivalAirportCode@*<span> - 1 stop</span>*@</p>
                @*<p style="float: right">
                @(hours)h @(minutes)m</p>*@
            </div>
            @{
                             int day = 0;
                             string FlightNumber = string.Empty;
                             DateTime? from = null;
                             int rowCount = 0;
                             foreach (var its in Model.Where(p => p.FlightID == grp.Key).OrderBy(p => p.From).ThenBy(p => p.FlightStat.DepartureTime))
                             {
                                 rowCount = rowCount + 1;
                                 int i = _db.GetFlightDataByItineraryID(its.Id).Count();

                                 t = TimeSpan.FromMinutes(its.FlightStat.FlightDurationMinutes);
                                 hours = (int)t.TotalHours;
                                 minutes = t.Minutes;

                <div class="Info-Inner">
                    <div class="Flights">
                        @(its.FlightStat.CarrierName)
                        - Flight @(its.FlightStat.FlightNumber)@*<p>
                            @(hours)h @(minutes)m</p>*@
                    </div>
                    <table>
                        <tbody>
                            <tr>
                                <td style="width: 82px;">
                                    Take-off
                                </td>
                                <td style="width: 91px;">
                                    @{
                                  DateTime DepartureTime = Convert.ToDateTime(its.FlightStat.DepartureTime);
                                  if (FlightNumber == its.FlightStat.FlightNumber && from == its.From && day != 0)
                                  {
                                  }
                                  else
                                  {
                                      day = 0;
                                  }
                                    }
                                    @its.From.GetValueOrDefault().AddDays(day).ToString("ddd")
                                    @(DepartureTime.ToString("hh:mmt"))
                                </td>
                                <td>
                                    @(its.FlightStat.DepartureAirportCode)
                                    <span>@(its.FlightStat.DepartureAirportCity), @(its.FlightStat.DepartureAirportStateCode)</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Landing
                                </td>
                                <td>
                                    @{
                                                                              DateTime ArrivalTime = Convert.ToDateTime(its.FlightStat.ArrivalTime);
                                                                              day = Convert.ToInt32(its.FlightStat.ArrivalDateAdjustment);
                                    }
                                    @its.From.GetValueOrDefault().AddDays(day).ToString("ddd")
                                    @(ArrivalTime.ToString("hh:mmt"))
                                </td>
                                <td>
                                    @(its.FlightStat.ArrivalAirportCode)<span>@(its.FlightStat.ArrivalAirportCity),
                                        @(its.FlightStat.ArrivalAirportStateCode)</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="Business">
                        <h1>
                            @(its.Class.UtilGetEnumAsString(true))</h1>
                        <p class="MT10">
                            <span>|</span> <span><b style="font-weight: bold; color: Red">@(its.FlightStat.Seat)
                                seats remain</b></span> <span>|</span> <span>
                                    @(hours)h @(minutes)m</span> <span>|</span> <span>
                                        @{
                                          var wj = string.Empty;
                                          var widebody = its.FlightStat.WideBody == "true" ? "Wide-body" : "";
                                          var jet = its.FlightStat.Jet == "true" ? "Jet" : "";
                                          if (!string.IsNullOrEmpty(widebody))
                                          {
                                              wj = "(" + widebody + " " + jet + ")";
                                          }
                                          else
                                          {
                                              wj = "(" + jet + ")";
                                          }
                                        }
                                        @(its.FlightStat.AircraftTypeName)
                                        @(its.FlightStat.AircraftTypeCode)
                                        @(wj)</span> @*<p>
                            |</p><p>
                            Fare code: IEE14US4</p>*@ @*<p>
                            |</p>*@
                        </p>
                    </div>
                    @if (Model.Where(p => p.FlightID == grp.Key).Count() != rowCount)
                    {
                        <div class="Hline-a">
                        </div>
                    }
                </div>
                    from = its.From;
                    FlightNumber = its.FlightNumber;
                             }}
        </div>  
        }
    }
</div>
<input type="hidden" value="@ViewBag.Id" id="LastId"/>
<input type="hidden" value="@ViewData["Message"]" id="msg"/>
<script type="text/javascript">
    function DeleteFlightLeg(e, id, oppid, frID) {
        $.post("/ItineraryBuilder/DeleteFlightStat?id=" + id + "&OpportunityId=" + oppid + "&FlightRequestID=" + frID, function (data) {
            $("#DivResult").html(data);
        });
    }
</script>
